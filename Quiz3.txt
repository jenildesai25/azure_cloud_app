
Name:Jenil Desai
Last 4 digits ID: 0245
Computer IP address: 129.107.80.98
CSE 6331, Cloud Computing					


Quiz Q3, Spring 2019   (c) DL, UTA, 2019


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     4 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     _________________

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4. Using the cloud services provider, all functionality possible should be implemented on that provider.
    (Of course, displaying web pages through a browser and the user interface is "local")

 5. Show a web page and interface (which resides on the cloud provider) with your name and 
    student ID in large font at the top of every web page dispayed (for this quiz)
    The cloud service provider is Microsoft Azure.

Show and submit code:

 6. Import the datasets into a Relational Data Base (SQL), if you have already done this, (briefly) explain/describe
    how you did this. Please note that for some parts of the following you will need to create indexes (keys)
    appropriately.

 7. Allow a user, through a web form, to give a two letter state name (for example "TX" for Texas), and a year, and you 
    show the state population for that year.

    ANS:

    @app.route('/analyze_randomq')
def analyze_randomq():
    cnt = request.args.get('count', '')
    year = int(request.args.get('year', 2018))
    source = request.args.get('source', 'sqldb')
    # random_list = [round(random.uniform(0, 10), 2) for i in range(cnt)]
    # columns = ['time', 'latitude', 'longitude', 'place', 'mag']
    # columns_str = '"' + '","'.join(columns) + '"'
    sqlquery = 'select population.[{0}] from  population LEFT JOIN dbo.statecode ON dbo.statecode.ID = dbo.population.ID where statecode.[Short name] like \'%{1}%\';'.format(year, cnt)
    cursor = database.connection.cursor()
    t = time.time()
    # time_of_1st = 0
    # total_time_taken = 0
    # result_1st = []
    if source == 'cache':
        source_used = 'Redis Cache'
        # for mag in random_list:
        formatted_query = sqlquery
        query_hash = hashlib.sha256(formatted_query.encode()).hexdigest()
        # t = time.time()
        result = redis.get(query_hash)
        print(result)
        if not result:
            cursor.execute(formatted_query)
            rows = cursor.fetchall()
            formatted_data = []
            for row in rows:
                # quake = dict()
                # for i, val in enumerate(row):
                #     if type(val) == datetime:
                #         val = time.mktime(val.timetuple())
                #     # quake[columns[i]] = val
                formatted_data.append(row[0])
            redis.set(query_hash, dumps(formatted_data))
            # result = loads(redis.get(query_hash)).decode()
        else:
            result = loads(result.decode())
            # total_time_taken += (time.time() - t)
            # if time_of_1st == 0:
            #     time_of_1st = deepcopy(total_time_taken)
            #     result_1st = result

    else:
        source_used = 'Azure SQL'
        # for mag in random_list:
        formatted_query = sqlquery
        query_hash = hashlib.sha256(formatted_query.encode()).hexdigest()
        cursor.execute(formatted_query)
        rows = cursor.fetchall()

        # if rows:
        #     print('Values present for: ',query_hash)
        formatted_data = []
        for row in rows:
            formatted_data.append(row[0])
            # quake = dict()
            # for i, val in enumerate(row):
            #     if type(val) == datetime:
            #         val = time.mktime(val.timetuple())
            #     # quake[columns[i]] = val
            # formatted_data.append(quake)
        redis.set(query_hash, dumps(formatted_data))

        result = formatted_data

    time_taken = time.time() - t
    return render_template('results.html', time_taken=time_taken, count=cnt, source=source_used, earthquakes=result)


 8. Allow a user, through a web form, to give a two letter state name, for all counties in that state, you show count 
    (total, number of counties) followed by a list of all counties in that state.

    ANS:

    @app.route('/analyze_randomq')
def analyze_randomq():
    cnt = request.args.get('count', '')
    # year = int(request.args.get('year', 2018))
    source = request.args.get('source', 'sqldb')
    # random_list = [round(random.uniform(0, 10), 2) for i in range(cnt)]
    # columns = ['time', 'latitude', 'longitude', 'place', 'mag']
    # columns_str = '"' + '","'.join(columns) + '"'
    sqlquery = []
    # sqlquery = 'select population.[{0}] from  population LEFT JOIN dbo.statecode ON dbo.statecode.ID = dbo.population.ID where statecode.[Short name] like \'%{1}%\';'.format(year, cnt)
    sqlquery.append('select count(*) from  counties LEFT JOIN dbo.statecode ON dbo.statecode.ID = dbo.counties.ID where counties.State like \'%{0}%\';'.format(cnt))
    sqlquery.append('select County from counties where State like \'%{0}%\';'.format(cnt))

    cursor = database.connection.cursor()
    t = time.time()
    # time_of_1st = 0
    # total_time_taken = 0
    # result_1st = []
    if source == 'cache':
        source_used = 'Redis Cache'
        for sql in sqlquery:
            formatted_query = sql
            query_hash = hashlib.sha256(formatted_query.encode()).hexdigest()
            # t = time.time()
            result = redis.get(query_hash)
            print(result)
            if not result:
                cursor.execute(formatted_query)
                rows = cursor.fetchall()
                formatted_data = []
                for row in rows:
                    # quake = dict()
                    # for i, val in enumerate(row):
                    #     if type(val) == datetime:
                    #         val = time.mktime(val.timetuple())
                    #     # quake[columns[i]] = val
                    formatted_data.append(row[0])
                redis.set(query_hash, dumps(formatted_data))
                # result = loads(redis.get(query_hash)).decode()
            else:
                result = loads(result.decode())
            # total_time_taken += (time.time() - t)
            # if time_of_1st == 0:
            #     time_of_1st = deepcopy(total_time_taken)
            #     result_1st = result

    else:
        source_used = 'Azure SQL'
        for sql in sqlquery:
            formatted_query = sql
            query_hash = hashlib.sha256(formatted_query.encode()).hexdigest()
            cursor.execute(formatted_query)
            rows = cursor.fetchall()

            # if rows:
            #     print('Values present for: ',query_hash)
            formatted_data = []
            for row in rows:
                formatted_data.append(row[0])
                # quake = dict()
                # for i, val in enumerate(row):
                #     if type(val) == datetime:
                #         val = time.mktime(val.timetuple())
                #     # quake[columns[i]] = val
                # formatted_data.append(quake)
            redis.set(query_hash, dumps(formatted_data))

            result = formatted_data

    time_taken = time.time() - t
    return render_template('results.html', time_taken=time_taken, count=cnt, source=len(result), earthquakes=result)



 9. Allow a user, through a web form, to give a year and population range, and you show the names of the states within that
    population range.

 10. A user will give you the number of times to do the "query", you will do the previous steps 8. and 9. that number of times 
     and show the results as well as the total time taken. 

 11. Repeat 10. using an in-memory caching mechanism (NOT an in-memory database) repeat the previous step, then show us.

 12. Show GTA parts (6 not necessary), 7, 8, 9, 10, 11
     (as soon as you complete any part.)

 13. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.

 Good Luck!











 